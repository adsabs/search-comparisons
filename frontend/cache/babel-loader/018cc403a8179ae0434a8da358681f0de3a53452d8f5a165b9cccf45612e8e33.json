{"ast":null,"code":"/**\n * API service for search-comparisons application.\n * \n * Provides methods for interacting with the backend API.\n */\nimport axios from 'axios';\n\n// Base API URL from environment or fallback to localhost\nconst API_URL = process.env.REACT_APP_API_URL || process.env.VITE_API_URL || \"http://localhost:8000\";\nconst DEBUG = process.env.REACT_APP_DEBUG === 'true';\n\n// Create axios instance with consistent configuration\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  timeout: 60000 // 1 minute timeout\n});\n\n// Log requests and responses in debug mode\nif (DEBUG) {\n  apiClient.interceptors.request.use(request => {\n    console.log('API Request:', request);\n    return request;\n  });\n  apiClient.interceptors.response.use(response => {\n    console.log('API Response:', response);\n    return response;\n  }, error => {\n    console.error('API Error:', error);\n    return Promise.reject(error);\n  });\n}\n\n/**\n * Standard error handler for API calls\n */\nconst handleApiError = error => {\n  let errorMessage = 'An unknown error occurred';\n  if (error.response) {\n    // The request was made and the server responded with an error status\n    const status = error.response.status;\n    const data = error.response.data;\n    if (data && data.detail) {\n      errorMessage = data.detail;\n    } else if (data && data.message) {\n      errorMessage = data.message;\n    } else {\n      errorMessage = `Server error: ${status}`;\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    errorMessage = 'No response received from server. Please check your connection.';\n  } else {\n    // Something happened in setting up the request\n    errorMessage = error.message || errorMessage;\n  }\n  return {\n    error: true,\n    message: errorMessage\n  };\n};\n\n/**\n * Search API services\n */\nconst searchService = {\n  /**\n   * Compare search results across multiple sources\n   */\n  compareSearchResults: async searchParams => {\n    try {\n      const response = await apiClient.post('/api/search/compare', searchParams);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  /**\n   * Get search results from a specific source\n   */\n  searchBySource: async (source, query, options = {}) => {\n    try {\n      const response = await apiClient.post(`/api/search/${source}`, {\n        query,\n        ...options\n      });\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  /**\n   * Get paper details by DOI\n   */\n  getPaperDetails: async (doi, sources = []) => {\n    try {\n      const params = sources.length > 0 ? {\n        sources: sources.join(',')\n      } : {};\n      const response = await apiClient.get(`/api/paper/${doi}`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};\n\n/**\n * Experiment API services\n */\nconst experimentService = {\n  /**\n   * Run result boosting experiment\n   */\n  runBoostExperiment: async boostConfig => {\n    try {\n      const response = await apiClient.post('/api/experiments/boost', boostConfig);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  /**\n   * Run A/B testing experiment\n   */\n  runAbTest: async (searchRequest, variation = 'B') => {\n    try {\n      const response = await apiClient.post(`/api/experiments/ab-test?variation=${variation}`, searchRequest);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  /**\n   * Get log analysis metrics\n   */\n  getLogAnalysis: async () => {\n    try {\n      const response = await apiClient.get('/api/experiments/log-analysis');\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};\n\n/**\n * Debug API services\n */\nconst debugService = {\n  /**\n   * List available sources and their configuration\n   */\n  listSources: async () => {\n    try {\n      const response = await apiClient.get('/api/debug/sources');\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  /**\n   * Get environment information\n   */\n  getEnvironmentInfo: async () => {\n    try {\n      const response = await apiClient.get('/api/debug/env');\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  /**\n   * Ping a specific source\n   */\n  pingSource: async source => {\n    try {\n      const response = await apiClient.get(`/api/debug/ping/${source}`);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  /**\n   * Test search on a specific source\n   */\n  testSearch: async (source, query, limit = 5) => {\n    try {\n      const response = await apiClient.get(`/api/debug/search/${source}?query=${encodeURIComponent(query)}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};\n\n// Export all services\nexport { searchService, experimentService, debugService, API_URL };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","VITE_API_URL","DEBUG","REACT_APP_DEBUG","apiClient","create","baseURL","headers","timeout","interceptors","request","use","console","log","response","error","Promise","reject","handleApiError","errorMessage","status","data","detail","message","searchService","compareSearchResults","searchParams","post","searchBySource","source","query","options","getPaperDetails","doi","sources","params","length","join","get","experimentService","runBoostExperiment","boostConfig","runAbTest","searchRequest","variation","getLogAnalysis","debugService","listSources","getEnvironmentInfo","pingSource","testSearch","limit","encodeURIComponent"],"sources":["/Users/JarmakS/SciX_Projects/SearchTool/search-comparisons/frontend/src/services/api.js"],"sourcesContent":["/**\n * API service for search-comparisons application.\n * \n * Provides methods for interacting with the backend API.\n */\nimport axios from 'axios';\n\n// Base API URL from environment or fallback to localhost\nconst API_URL = process.env.REACT_APP_API_URL || process.env.VITE_API_URL || \"http://localhost:8000\";\nconst DEBUG = process.env.REACT_APP_DEBUG === 'true';\n\n// Create axios instance with consistent configuration\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  timeout: 60000 // 1 minute timeout\n});\n\n// Log requests and responses in debug mode\nif (DEBUG) {\n  apiClient.interceptors.request.use(request => {\n    console.log('API Request:', request);\n    return request;\n  });\n  \n  apiClient.interceptors.response.use(\n    response => {\n      console.log('API Response:', response);\n      return response;\n    },\n    error => {\n      console.error('API Error:', error);\n      return Promise.reject(error);\n    }\n  );\n}\n\n/**\n * Standard error handler for API calls\n */\nconst handleApiError = (error) => {\n  let errorMessage = 'An unknown error occurred';\n  \n  if (error.response) {\n    // The request was made and the server responded with an error status\n    const status = error.response.status;\n    const data = error.response.data;\n    \n    if (data && data.detail) {\n      errorMessage = data.detail;\n    } else if (data && data.message) {\n      errorMessage = data.message;\n    } else {\n      errorMessage = `Server error: ${status}`;\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    errorMessage = 'No response received from server. Please check your connection.';\n  } else {\n    // Something happened in setting up the request\n    errorMessage = error.message || errorMessage;\n  }\n  \n  return {\n    error: true,\n    message: errorMessage\n  };\n};\n\n/**\n * Search API services\n */\nconst searchService = {\n  /**\n   * Compare search results across multiple sources\n   */\n  compareSearchResults: async (searchParams) => {\n    try {\n      const response = await apiClient.post('/api/search/compare', searchParams);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  /**\n   * Get search results from a specific source\n   */\n  searchBySource: async (source, query, options = {}) => {\n    try {\n      const response = await apiClient.post(`/api/search/${source}`, { \n        query,\n        ...options\n      });\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  /**\n   * Get paper details by DOI\n   */\n  getPaperDetails: async (doi, sources = []) => {\n    try {\n      const params = sources.length > 0 ? { sources: sources.join(',') } : {};\n      const response = await apiClient.get(`/api/paper/${doi}`, { params });\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};\n\n/**\n * Experiment API services\n */\nconst experimentService = {\n  /**\n   * Run result boosting experiment\n   */\n  runBoostExperiment: async (boostConfig) => {\n    try {\n      const response = await apiClient.post('/api/experiments/boost', boostConfig);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  /**\n   * Run A/B testing experiment\n   */\n  runAbTest: async (searchRequest, variation = 'B') => {\n    try {\n      const response = await apiClient.post(`/api/experiments/ab-test?variation=${variation}`, searchRequest);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  /**\n   * Get log analysis metrics\n   */\n  getLogAnalysis: async () => {\n    try {\n      const response = await apiClient.get('/api/experiments/log-analysis');\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};\n\n/**\n * Debug API services\n */\nconst debugService = {\n  /**\n   * List available sources and their configuration\n   */\n  listSources: async () => {\n    try {\n      const response = await apiClient.get('/api/debug/sources');\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  /**\n   * Get environment information\n   */\n  getEnvironmentInfo: async () => {\n    try {\n      const response = await apiClient.get('/api/debug/env');\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  /**\n   * Ping a specific source\n   */\n  pingSource: async (source) => {\n    try {\n      const response = await apiClient.get(`/api/debug/ping/${source}`);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  },\n  \n  /**\n   * Test search on a specific source\n   */\n  testSearch: async (source, query, limit = 5) => {\n    try {\n      const response = await apiClient.get(`/api/debug/search/${source}?query=${encodeURIComponent(query)}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      return handleApiError(error);\n    }\n  }\n};\n\n// Export all services\nexport {\n  searchService,\n  experimentService,\n  debugService,\n  API_URL\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}